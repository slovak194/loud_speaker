%% Coder configuration
cfg = coder.config('lib');
cfg.FilePartitionMethod = 'SingleFile';
cfg.GenerateCodeMetricsReport = true;
cfg.GenerateCodeReplacementReport = true;
cfg.HighlightPotentialDataTypeIssues = true;
cfg.SupportNonFinite = false;
cfg.TargetLang = 'C';
cfg.GenCodeOnly = true;
cfg.GenerateExampleMain = 'DoNotGenerate';
cfg.GenerateReport = true;
cfg.LaunchReport = false;
cfg.ReportPotentialDifferences = true;

%% Helper variables needed for struct initializers
state_info = get_state_info();
state_t = get_vector_to_struct(X0, @get_state_info);
dstate_t = get_vector_to_struct(X0, @get_dstate_info);
parameters_t = get_vector_to_struct(p, @get_parameters_info);
state_header = char(strjoin(fieldnames(state_t), ', '));
ctrl_t = get_vector_to_struct(zeros(NU, 1, 'single'), @get_ctrl_info);

% Some useful defines in header
cfg.CustomHeaderCode = char(...
    "#define NU " + num2str(NU) + newline + ...
    "#define NP " + num2str(numel(p)) + newline + ...
    "#define N_STATE_HEADER " + num2str(numel(state_header)) + newline + ...
    "#define NX " + num2str(NX) + newline ...
    );

%% Generate C code
result = codegen('-config', cfg, ...
    'get_ekf', '-args', {u0, {single(0), single(0)}, f_p, p, dt}, ...
    'get_R_e_measurement', '-args', {X0, u0, n, p}, ...
    'get_ii_measurement', '-args', {X0, u0, n, p}, ...
    'get_model_step', '-args', {X0, u0, u0, n, p, dt}, ...
    'parameters_initializer', '-args', {coder.Constant(parameters_t)}, ...
    'state_names_initializer', '-args', {coder.Constant(state_header)}, ...
    'state_struct_initializer', '-args', {coder.Constant(state_t)}, ...
    'dstate_struct_initializer', '-args', {coder.Constant(dstate_t)}, ...
    'ctrl_struct_initializer', '-args', {coder.Constant(ctrl_t)}, ...
    'filter_parameters_struct_initializer', '-args', {coder.Constant(f_p)} ...
    )

return

%% Build mex extension for MATLAB (OPTIONAL)

cfg = coder.config('mex');
result = codegen('-config', cfg, ...
    'get_model_step', '-args', {X0, u0, u0, n, p, dt})

result = codegen('-config', cfg, ...
    'get_ekf', '-args', {u0, {single(0), single(0)}, f_p, p, dt})
